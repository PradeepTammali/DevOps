---
kind: Service
apiVersion: v1
metadata:
  name: logstash
spec:
  selector:
    app: logstash
  ports:
    - name: logstash-port
      port: 5044
      protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  labels:
    app: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          resources:
            requests:
              cpu: '1'
              memory: '2Gi'
            limits:
              cpu: '1'
              memory: '2Gi'
          image: docker.elastic.co/logstash/logstash:7.3.2
          ports:
            - containerPort: 5044
          env:
            - name: ELASTICSEARCH_PASSWORD
              value: "test1234"
            - name: ELASTICSEARCH_HOSTS
              value: http://elasticsearch.elk-nsc.svc.cluster.local:9200
          volumeMounts:
            - name: logstash-pipelines
              mountPath: /usr/share/logstash/pipeline
            - name: logstash-config
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml
      volumes:
        - name: logstash-pipelines
          configMap:
            name: logstash-pipelines
        - name: logstash-config
          configMap:
            name: logstash-pwd-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pwd-config
  labels:
    app: logstash
data:
  logstash.yml: |-
    config.reload.automatic: true
    #xpack.monitoring.elasticsearch.username: "elastic"
    #xpack.monitoring.elasticsearch.password: "test1234"
    #xpack.monitoring.enabled: true
    #xpack.monitoring.elasticsearch.hosts: ${ELASTICSEARCH_HOSTS}
    #xpack.monitoring.elasticsearch.username: "elastic"
    #xpack.monitoring.elasticsearch.password:  'test1234'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pipelines
data:
  pradeep-logstash.conf: |
    input {
        beats {
            port => 5044
        }
    }

    filter {
      if [component] == "pradeep" and [service] == "orchestrator" and [server] == "celery" {
        if [log][file][path] =~ "celery_deployment.log" {
          grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{DATA:task_id} - %{WORD:module} - %{DATA:pod} - %{DATA:deployment_name} - %{LOGLEVEL:log_level}: %{GREEDYDATA:msg}" }
            remove_field => "message"
          }
          date {
            match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
          }
        } else {
            grok {
              match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{DATA:task_id} - %{WORD:module} - %{DATA:pod} - %{LOGLEVEL:log_level}: %{GREEDYDATA:msg}" }
              remove_field => "message"
            }
            date {
              match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
            }
        }
      } else if [component] == "pradeep" and [log][file][path] =~ "_gaccess.log" {
          grok {
            match => { "message" => "%{IPORHOST:remote_ip} -%{DATA:remote_user}- \[%{HTTPDATE:timestamp}\] \"%{WORD:request_method} %{DATA:request_path} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:response_length} \"%{DATA:request_referer}\" \"%{DATA:user_agent}\"" }
            remove_field => "message"
          }
          mutate {
            add_field => { "log_type" => "gaccess" }
          }
          date {
            match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
      } else if [component] == "pradeep" and [log][file][path] =~ "_gerror.log" {
          grok {
            match => { "message" => "\[%{DATA:timestamp}\] (\[%{DATA:pid}\])?(\s*)?(\[)?%{LOGLEVEL:log_level}(\])? %{GREEDYDATA:msg}" }
            remove_field => "message"
          }
          mutate {
            add_field => { "log_type" => "gerror" }
          }
          date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss Z" ]
          }
      } else if [component] == "pradeep" {
          grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:module} - %{DATA:pod} - %{LOGLEVEL:log_level}: %{GREEDYDATA:msg}" }
            remove_field => "message"
          }
          if [log][file][path] =~ "_access.log" {
            mutate {
              add_field => { "log_type" => "access" }
            }
          } else if [log][file][path] =~ "_error.log" {
            mutate {
              add_field => { "log_type" => "error" }
            }
          }
          date {
            match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
          }
      } 
    }

    output {
      if [component] == "pradeep" {
        elasticsearch {
          hosts => ["http://elasticsearch.elk-nsc.svc.cluster.local:9200"]
          cacert => '/etc/logstash/config/certs/ca.crt'
          user => 'elastic'
          password => 'test1234'
          manage_template => false
          index => "pradeep-%{+YYYY.MM.dd}"
         }    
       } else {
            elasticsearch {
              hosts => ["http://elasticsearch.elk-nsc.svc.cluster.local:9200"]
              user => ["elastic"]
              password => ["test1234"]
              cacert => '/etc/logstash/config/certs/ca.crt'
              manage_template => false
              index => "other-%{+YYYY.MM.dd}"
          }
      }
      #stdout { codec => rubydebug { metadata => true } }
    }
